import os

from cs50 import SQL
from flask import Flask, flash, jsonify, redirect, render_template, request, session
from datetime import datetime
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash
from helpers import apology, login_required, usd
# lookup,

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")

# Make sure API key is set
# if not os.environ.get("API_KEY"):
#     api_key = 'pk_8897bd630d4549c6ae39130731335878'
#     raise RuntimeError("API_KEY not set")

@app.route("/")
@login_required
def index():
    """Show portfolio of stocks"""
    # Get user account Info
    user_id = session["user_id"]
    rows = db.execute("SELECT * FROM transactions JOIN budget ON transactions.user_id = budget.user_id WHERE transactions.user_id = :user_id", user_id=user_id)
    print("rows", rows)
    total_amount = 0
    total_buy_price = 0
    total_current_amount = 0
    cash_ammount = 0
    rest_amount = 0
    response = []
    amount_per_share = []
    if rows:
        for i, row in enumerate(rows):
            symbol = row["symbol"]
            shares = row["shares"]
            buy_price = row["price"]
            cash = row["cash"]
            response.append(lookup(row["symbol"]))
            current_price = response[i]["price"]
            amount_per_share.append('{:,.2f}'.format(round((shares * current_price), 2)))
            total_current_amount = float(round(total_current_amount + (shares * current_price), 2))
            cash_ammount = float(round((row["cash"] - total_buy_price), 2))
            rest_amount = round((cash_ammount + total_current_amount), 2)
    else:
        print("test22")
        cash_row = db.execute("SELECT * FROM budget WHERE user_id = :user_id", user_id=user_id)
        for i, row in enumerate(cash_row):
            cash = row["cash"]
            symbol = ""
            amount_per_share = 0
            total_current_amount = 0
            total_buy_price = 0
            cash_ammount = cash
            rest_amount = cash
            rows = []

    return render_template("index.html", rows=rows, response=response, cash_ammount=cash_ammount, amount_per_share=amount_per_share, rest_amount=rest_amount)


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""
    user_id = session["user_id"]
    cash_row = db.execute("SELECT * FROM budget WHERE user_id = :user_id", user_id=user_id)
    cash = 0
    for i in cash_row:
        cash = i["cash"]
        print("cash", cash)
    if request.method == "GET":
        return render_template("buy.html")
    else:
        symbol = request.form.get("symbol")
        response = lookup(symbol)
        shares = request.form.get("shares")
        if not symbol:
            return apology("MISSING SYMBOL")
        if response == None:
            return apology("INVALID SYMBOL")
        if not shares:
            return apology("MISSING SHARES")
        name = response["name"]
        price = response["price"]
        new_symbol = response["symbol"]

        # check if user can afford the shares
        afford = int(shares) * float(price)
        if cash < afford:
            return apology("CAN'T AFFORD")

        # Check if this stock is in users Portfolio
        rows = db.execute("SELECT * FROM transactions WHERE user_id = ? AND symbol = ?", user_id, new_symbol)
        # print("rows",rows)
        if not rows:
            total_buy_ammount = float(round((int(shares) * float(price)), 2))
            cash_ammount = float(round((float(cash) - float(total_buy_ammount)), 2))
            date = datetime.now()

            # Insert into transactions table, the new transaction
            transaction_id = db.execute("INSERT INTO transactions (user_id, symbol, shares, price, companyName, date) VALUES (:user_id, :symbol, :shares, :price, :companyName, :date)", user_id=user_id, symbol=new_symbol, shares=shares, price=price, companyName=name, date=date)
            # Insert into history table, the same transaction
            db.execute("INSERT INTO history (user_id, transaction_id, symbol, shares, price, date, buy_sell) VALUES (:user_id, :transaction_id, :symbol, :shares, :price, :date, :buy_sell)", user_id=user_id, transaction_id=transaction_id, symbol=new_symbol, shares=shares, price=price, date=date, buy_sell="buy")
            # Update the cash amount from user, in the budget table
            sql_update_query = """UPDATE budget SET cash = ? WHERE user_id = ?"""
            data = (cash_ammount, user_id)
            db.execute(sql_update_query, data)
        else:
            # Update the stock
            for row in rows:
                current_shares = int(row["shares"])
                new_shares = int(shares)
                total_shares = current_shares + new_shares
                # Calculate the remaining cash
                total_buy_ammount = float(round((int(shares) * float(price)), 2))
                cash_ammount = float(round((float(cash) - float(total_buy_ammount)), 2))
                transaction_id = int(row['transaction_id'])
                sql_update_query = """UPDATE transactions SET shares = ?, price = ? where user_id = ? AND transaction_id = ?"""
                data = (total_shares, price, user_id, transaction_id)
                db.execute(sql_update_query, data)

                # Insert into history table, the same transaction
                date = datetime.now()
                db.execute("INSERT INTO history (user_id, transaction_id, symbol, shares, price, date, buy_sell) VALUES (:user_id, :transaction_id, :symbol, :shares, :price, :date, :buy_sell)",  user_id=user_id, transaction_id=transaction_id, symbol=new_symbol, shares=shares, price=price, date=date, buy_sell="buy")
                # Update the cash amount from user, in the budget table
                sql_update_query = """UPDATE budget SET cash = ? WHERE user_id = ?"""
                data = (cash_ammount, user_id)
                db.execute(sql_update_query, data)

    flash("Bought!")
    return redirect("/")


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    # Check if this stock is in users Portfolio
    user_id = session["user_id"]
    rows = db.execute("SELECT * FROM history WHERE user_id = ?", user_id)
    # If no transaction are yet made
    if not rows:
        return render_template("history.html")
    else:
        for row in rows:
            symbol = row["symbol"]
            shares = row["shares"]
            buy_price = row["price"]
            date = row["date"]

    return render_template("history.html", rows=rows, symbol=symbol, shares=shares, buy_price=buy_price, date=date)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for username
        rows = db.execute("SELECT * FROM users WHERE username = :username",
                          username=request.form.get("username"))

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""
    # return apology("TODO")
    if request.method == "GET":
        return render_template("quote.html")
    else:
        symbol = request.form.get("symbol")
        response = lookup(symbol)
        if response == None:
            return apology("INVALID SYMBOL")
        name = response["name"]
        price = response["price"]
        new_symbol = response["symbol"]
        return render_template("quoted.html", name=name, price=price, new_symbol=new_symbol)
    return render_template("quote.html")


@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user"""
    if request.method == "GET":
        return render_template("register.html")
    else:
        username = request.form.get("username")
        if not username:
            return apology("TODO")
        temp_password = request.form.get("password")
        confirmation = request.form.get("confirmation")
        if not temp_password or not confirmation:
            return apology("TODO")
        password = generate_password_hash(temp_password)

    # Query database for username
    user_id = db.execute("INSERT INTO users (username, hash) VALUES (:username, :password)", username=username, password=password)
    db.execute("INSERT INTO cash (user_id) VALUES (:user_id)", user_id=user_id)
    flash("REGISTERED!")
    return render_template("login.html")


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""
    user_id = session["user_id"]
    shares_to_sell = 0
    transaction_id = 0
    # Get user account Info
    rows = db.execute("SELECT * FROM transactions WHERE user_id = ?", user_id)
    cash_row = db.execute("SELECT * FROM budget WHERE user_id = ?", user_id)
    cash = 0
    for i in cash_row:
        cash = i["cash"]
        print("cash", cash)
    # If no transaction are yet made
    if not rows:
        return render_template("sell.html")
    else:
        for row in rows:
            current_symbol = row["symbol"]
            current_shares = int(row["shares"])
    # Get the request from the form
    if request.method == "GET":
        return render_template("sell.html", rows=rows, symbol=current_symbol, current_shares=current_shares)
    if request.method == "POST":
        symbol = request.form.get("symbol")
        if symbol == None:
            return apology("MISSING SYMBOL")
        response = lookup(symbol)
        price = response["price"]
        shares_to_sell = int(request.form.get("shares"))
        # Calculate the remaining cash
        generated_cash = float(round((int(shares_to_sell) * float(price)), 2))
        cash_ammount = float(round((float(cash) + float(generated_cash)), 2))

        if not symbol:
            return apology("MISSING SYMBOL")
        if int(shares_to_sell) <= 0:
            return apology("SHARES MUST BE POSITIVE")
        if not shares_to_sell:
            return apology("MISSING SHARES")

        for row in rows:
            current_symbol = row["symbol"]
            if symbol == current_symbol:
                current_shares = int(row["shares"])
                transaction_id = int(row['transaction_id'])
        if int(shares_to_sell) > current_shares:
            return apology("TO MANY SHARES")
        else:
            # Update
            for row in rows:
                current_symbol = row["symbol"]
                if symbol == current_symbol:
                    current_shares = int(row["shares"])
                    total_shares = current_shares - int(shares_to_sell)

            sql_update_query = """UPDATE transactions SET shares = ? where user_id = ? AND transaction_id = ?"""
            data = (total_shares, user_id, transaction_id)
            db.execute(sql_update_query, data)

            # Insert into history table, the same transaction
            date = datetime.now()
            db.execute("INSERT INTO history (user_id, transaction_id, symbol, shares, price, date, buy_sell) VALUES (:user_id, :transaction_id, :symbol, :shares, :price, :date, :buy_sell)",  user_id=user_id, transaction_id=transaction_id, symbol=symbol, shares=shares_to_sell, price=price, date=date, buy_sell="sell")
            # Update the cash amount from user, in the budget table
            sql_update_query = """UPDATE budget SET cash = ? WHERE user_id = ?"""
            data = (cash_ammount, user_id)
            db.execute(sql_update_query, data)
            flash("SOLD!")
    return redirect("/")


def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)


# User can add cash in his account
@app.route("/cash", methods=["GET", "POST"])
@login_required
def cash():
    """Add Cash in your account"""
    user_id = session["user_id"]
    # Get the user cash ammount
    cash_row = db.execute("SELECT * FROM budget WHERE user_id = :user_id", user_id=user_id)
    cash = 0
    for i in cash_row:
        cash = i["cash"]
        print("cash", cash)
    if request.method == "GET":
        return render_template("cash.html", cash=cash)
    else:
        new_cash = request.form.get("cash")
        cash = round(float(cash) + float(new_cash), 2)
        # Update the cash amount from user, in the budget table
        sql_update_query = """UPDATE budget SET cash = ? WHERE user_id = ?"""
        data = (cash, user_id)
        db.execute(sql_update_query, data)
        flash("CASH ADDED!")

    return redirect("/")